type Blueprint @entity {
  id: ID! # tokenID
  score : Int!
  scoreCategory: String!
  emojiString: String
  listing : Listing @derivedFrom (field: "blueprint") 
  bids: [Bid!] @derivedFrom (field: "blueprint") 
  emojis: [EmojiLeaderBoard!]! 
  owner: String
  history: [Activity!] @derivedFrom (field: "blueprint")
  combined: Int!
  
}


type Bid @entity {
  id: ID! # TokenId_BidderAddy
  tokenID : BigInt!
  bidPrice : BigInt!
  bidder : String!
  owner : String!
  blueprint: Blueprint
}

type Listing @entity {
  id: ID! # ListingId
  tokenID : BigInt!
  owner : String!
  price : BigInt!
  blueprint: Blueprint!

}


type Stat @entity {
  id: ID!
  totalBlueprint: Int!
  totalVolume: BigInt!
  totalOwners: Int!
  totalEmojiCount: Int!

}


type Owner @entity{ # count entities somehow
  id: ID!
  numberOfBlueprints: Int!
  
}

type Emoji @entity{ 
  id: ID!
  count: Int!
  emojiPrices: [EmojiPrice!] @derivedFrom(field: "emoji")
  
}

type ScoreSalesVolume @entity{
  id: ID!
  totalVolume: BigInt!
}

type Activity @entity{
  id: ID! # blueprintId + txid
  name: String
  blueprint: Blueprint
  date: BigInt
  from: String
  to: String
  price: BigInt

}

type BurnedBlueprint @entity{
  id: ID! # blueprintId
  bidder: [String!]!

}

type EmojiPrice @entity{
  id: ID!
  price: BigInt!
  emoji: Emoji!
}

type EmojiLeaderBoard @entity {
  id: ID! # emoji name
  suply: Int!
  floor: BigInt!
  available : Int!
  avarageSale : BigInt!
  totalVolume: BigInt!
  blueprints: [Blueprint!]! @derivedFrom(field: "emojis") # reverse look up from a list
}

type ClassLeaderBoard @entity {
  id: ID! # common, big, epic, enormous, colossal
  suply: Int! # out for nowfloor: BigInt
  available : Int!
  avarageSale : BigInt!
  totalVolume: BigInt!
}





